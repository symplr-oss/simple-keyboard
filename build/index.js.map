{"version":3,"sources":["../../webpack/universalModuleDefinition","../../webpack/bootstrap","services/Utilities.js","services/PhysicalKeyboard.js","components/Keyboard.js","services/KeyboardLayout.js","index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utilities","getOptions","getCaretPosition","getCaretPositionEnd","dispatch","bindMethods","myClass","instance","getOwnPropertyNames","myMethod","button","buttonTypeClass","includes","buttonWithoutBraces","replace","buttonNormalized","display","mergeDisplay","assign","getDefaultDiplay","input","caretPos","caretPosEnd","moveCaret","options","commonParams","output","length","removeAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","minus","newCaretPos","updateCaretPosAction","setCaretPosition","caretPosition","debug","console","log","keyboardDOMClass","source","str","position","positionEnd","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","func","timeout","waiting","apply","arguments","setTimeout","PhysicalKeyboard","event","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","getButtonElement","style","backgroundColor","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","physicalKeyboardHighlightPress","onpointerdown","onmousedown","ontouchstart","noop","removeAttribute","onpointerup","onmouseup","ontouchend","code","SimpleKeyboard","params","keyboardDOM","document","querySelector","HTMLDivElement","className","warn","Error","caretPositionEnd","initCallback","baseDOMClasses","keyboardClasses","filter","DOMClass","handleParams","utilities","layoutName","theme","preventMouseDownDefault","keyboardPluginClasses","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","render","loadModules","endPosition","onKeyPress","getUpdatedInput","inputPattern","inputPatternIsValid","handleMaxLength","getAllInputs","syncInstanceInputs","onChange","getInput","onChangeAll","e","preventDefault","stopMouseDownPropagation","stopPropagation","target","classList","add","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","isMouseHold","disableButtonHold","handleButtonHold","preventMouseUpDefault","stopMouseUpPropagation","recurseButtons","buttonElement","remove","onKeyReleased","handleButtonClicked","replaceInput","skipSync","rtl","inputWithoutRTLControl","forEach","changedOptions","onSetOptions","newOptions","optionName","JSON","stringify","innerHTML","callback","buttons","classNameItem","buttonTheme","classNameFound","map","class","buttonThemeArray","push","Array","isArray","index","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","RegExp","didInputMatch","test","addEventListener","handleKeyUp","handleKeyDown","handleMouseUp","handleTouchEnd","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","targetTagName","tagName","isKeyboard","contains","disableCaretPositioning","selectionStart","selectionEnd","fn","buttonName","removeEventListener","ontouchcancel","deleteButton","onpointercancel","onclick","clear","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","useTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","KeyboardModule","keyboardModule","constructor","classStr","init","prop","rowDOM","rowIndex","containerStartIndexes","containerEndIndexes","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","createElement","containerUID","setAttribute","containedElements","element","appendChild","layoutClass","layout","default","shift","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","row","rIndex","rowArray","bIndex","buttonHasContainerStart","indexOf","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","buttonType","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","throttle","handleButtonMouseDown","throttleInput","handleButtonMouseUp","buttonUID","buttonSpanDOM","parseRowDOMContainers","handleKeyboardContainerMouseDown"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleKeyboard\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, getCaretPositionEnd, dispatch }) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.getCaretPositionEnd = getCaretPositionEnd;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button) {\r\n    const buttonTypeClass =\r\n      button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\"\r\n        ? \"functionBtn\"\r\n        : \"standardBtn\";\r\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\")\r\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDiplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\"\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button, display, mergeDisplay) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDiplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDiplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {number} caretPosEnd The cursor's current end position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(\r\n    button,\r\n    input,\r\n    caretPos,\r\n    caretPosEnd = caretPos,\r\n    moveCaret = false\r\n  ) {\r\n    const options = this.getOptions();\r\n    const commonParams = [caretPos, caretPosEnd, moveCaret];\r\n\r\n    let output = input;\r\n\r\n    if (\r\n      (button === \"{bksp}\" || button === \"{backspace}\") &&\r\n      output.length > 0\r\n    ) {\r\n      output = this.removeAt(output, ...commonParams);\r\n    } else if (button === \"{space}\")\r\n      output = this.addStringAt(output, \" \", ...commonParams);\r\n    else if (\r\n      button === \"{tab}\" &&\r\n      !(\r\n        typeof options.tabCharOnTab === \"boolean\" &&\r\n        options.tabCharOnTab === false\r\n      )\r\n    ) {\r\n      output = this.addStringAt(output, \"\\t\", ...commonParams);\r\n    } else if (\r\n      (button === \"{enter}\" || button === \"{numpadenter}\") &&\r\n      options.newLineOnEnter\r\n    )\r\n      output = this.addStringAt(output, \"\\n\", ...commonParams);\r\n    else if (\r\n      button.includes(\"numpad\") &&\r\n      Number.isInteger(Number(button[button.length - 2]))\r\n    ) {\r\n      output = this.addStringAt(\r\n        output,\r\n        button[button.length - 2],\r\n        ...commonParams\r\n      );\r\n    } else if (button === \"{numpaddivide}\")\r\n      output = this.addStringAt(output, \"/\", ...commonParams);\r\n    else if (button === \"{numpadmultiply}\")\r\n      output = this.addStringAt(output, \"*\", ...commonParams);\r\n    else if (button === \"{numpadsubtract}\")\r\n      output = this.addStringAt(output, \"-\", ...commonParams);\r\n    else if (button === \"{numpadadd}\")\r\n      output = this.addStringAt(output, \"+\", ...commonParams);\r\n    else if (button === \"{numpaddecimal}\")\r\n      output = this.addStringAt(output, \".\", ...commonParams);\r\n    else if (button === \"{\" || button === \"}\")\r\n      output = this.addStringAt(output, button, ...commonParams);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\"))\r\n      output = this.addStringAt(output, button, ...commonParams);\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length, minus) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch(instance => {\r\n      instance.setCaretPosition(newCaretPos);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length, minus) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (minus) {\r\n      if (caretPosition > 0) caretPosition = caretPosition - length;\r\n    } else {\r\n      caretPosition = caretPosition + length;\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition, `(${this.keyboardDOMClass})`);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} str The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(\r\n    source,\r\n    str,\r\n    position = source.length,\r\n    positionEnd = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + str;\r\n    } else {\r\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join(\r\n        \"\"\r\n      );\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(str.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(\r\n    source,\r\n    position = source.length,\r\n    positionEnd = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (position === 0 && positionEnd === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      let prevTwoChars;\r\n      let emojiMatched;\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      if (position && position >= 0) {\r\n        prevTwoChars = source.substring(position - 2, position);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.substr(0, position - 2) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.substr(0, position - 1) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      } else {\r\n        prevTwoChars = source.slice(-2);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.slice(0, -2);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.slice(0, -1);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch(instance => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj, updatedInput) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      const condition = updatedInput.length - 1 >= maxLength[options.inputName];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass, instance) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod =\r\n        myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} str The string to transform.\r\n   */\r\n  camelCase(str) {\r\n    if (!str) return false;\r\n\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((str, word) =>\r\n        word.length ? str + word[0].toUpperCase() + word.slice(1) : str\r\n      );\r\n  }\r\n\r\n  throttle(func, timeout) {\r\n    let waiting = false;\r\n    return function() {\r\n      if (!waiting) {\r\n        func.apply(this, arguments);\r\n        waiting = true;\r\n        setTimeout(function() {\r\n          waiting = false;\r\n        }, timeout);\r\n      }\r\n    };\r\n  }\r\n\r\n  static noop = () => {};\r\n}\r\n\r\nexport default Utilities;\r\n","import Utilities from \"../services/Utilities\";\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(event) {\r\n    const options = this.getOptions();\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n    this.dispatch(instance => {\r\n      const buttonDOM =\r\n        instance.getButtonElement(buttonPressed) ||\r\n        instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      if (buttonDOM) {\r\n        buttonDOM.style.backgroundColor =\r\n          options.physicalKeyboardHighlightBgColor || \"#dadce4\";\r\n        buttonDOM.style.color =\r\n          options.physicalKeyboardHighlightTextColor || \"black\";\r\n\r\n        if (options.physicalKeyboardHighlightPress) {\r\n          /**\r\n           * Trigger pointerdown\r\n           */\r\n          (\r\n            buttonDOM.onpointerdown ||\r\n            buttonDOM.onmousedown ||\r\n            buttonDOM.ontouchstart ||\r\n            Utilities.noop\r\n          )();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(event) {\r\n    const options = this.getOptions();\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n    this.dispatch(instance => {\r\n      const buttonDOM =\r\n        instance.getButtonElement(buttonPressed) ||\r\n        instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      if (buttonDOM && buttonDOM.removeAttribute) {\r\n        buttonDOM.removeAttribute(\"style\");\r\n\r\n        if (options.physicalKeyboardHighlightPress) {\r\n          /**\r\n           * Trigger pointerup\r\n           */\r\n          (\r\n            buttonDOM.onpointerup ||\r\n            buttonDOM.onmouseup ||\r\n            buttonDOM.ontouchend ||\r\n            Utilities.noop\r\n          )();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} event The KeyboardEvent\r\n   */\r\n  getSimpleKeyboardLayoutKey(event) {\r\n    let output;\r\n\r\n    if (\r\n      event.code.includes(\"Numpad\") ||\r\n      event.code.includes(\"Shift\") ||\r\n      event.code.includes(\"Space\") ||\r\n      event.code.includes(\"Backspace\") ||\r\n      event.code.includes(\"Control\") ||\r\n      event.code.includes(\"Alt\") ||\r\n      event.code.includes(\"Meta\")\r\n    ) {\r\n      output = event.code;\r\n    } else {\r\n      output = event.key;\r\n    }\r\n\r\n    /**\r\n     * If button is not uppercase, casting to lowercase\r\n     */\r\n    if (\r\n      output !== output.toUpperCase() ||\r\n      (event.code[0] === \"F\" &&\r\n        Number.isInteger(Number(event.code[1])) &&\r\n        event.code.length <= 3)\r\n    ) {\r\n      output = output.toLowerCase();\r\n    }\r\n\r\n    return output;\r\n  }\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import \"./Keyboard.css\";\r\n\r\n// Services\r\nimport { getDefaultLayout } from \"../services/KeyboardLayout\";\r\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\r\nimport Utilities from \"../services/Utilities\";\r\n\r\n/**\r\n * Root class for simple-keyboard\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(...params) {\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(\r\n      params\r\n    );\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      getCaretPositionEnd: this.getCaretPositionEnd,\r\n      dispatch: this.dispatch\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Caret position end\r\n     */\r\n    this.caretPositionEnd = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\r\n     * @property {number} throttleInput Amount in milliseconds to wait after key press before accepting new input.\r\n     */\r\n    this.options = options;\r\n    this.options.layoutName = this.options.layoutName || \"default\";\r\n    this.options.theme = this.options.theme || \"hg-theme-default\";\r\n    this.options.inputName = this.options.inputName || \"default\";\r\n    this.options.preventMouseDownDefault =\r\n      this.options.preventMouseDownDefault || false;\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = \"\";\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    this.input = {};\r\n    this.input[this.options.inputName] = \"\";\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!window[\"SimpleKeyboardInstances\"])\r\n      window[\"SimpleKeyboardInstances\"] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    window[\"SimpleKeyboardInstances\"][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = window[\"SimpleKeyboardInstances\"];\r\n    this.keyboardInstanceNames = Object.keys(window[\"SimpleKeyboardInstances\"]);\r\n    this.isFirstKeyboardInstance =\r\n      this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions\r\n    });\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = params => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof params[0] === \"string\") {\r\n      keyboardDOMClass = params[0].split(\".\").join(\"\");\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`);\r\n      options = params[1];\r\n\r\n      /**\r\n       * If first parameter is an HTMLDivElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (params[0] instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!params[0].className) {\r\n        console.warn(\"Any DOM element passed as parameter must have a class.\");\r\n        throw new Error(\"KEYBOARD_DOM_CLASS_ERROR\");\r\n      }\r\n\r\n      keyboardDOMClass = params[0].className.split(\" \")[0];\r\n      keyboardDOM = params[0];\r\n      options = params[1];\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = \"simple-keyboard\";\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`);\r\n      options = params[0];\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = () => this.options;\r\n  getCaretPosition = () => this.caretPosition;\r\n  getCaretPositionEnd = () => this.caretPositionEnd;\r\n\r\n  /**\r\n   * Setters\r\n   */\r\n  setCaretPosition(position, endPosition) {\r\n    this.caretPosition = position;\r\n    this.caretPositionEnd = endPosition || position;\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button) {\r\n    const debug = this.options.debug;\r\n\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === \"{//}\") return false;\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === \"function\")\r\n      this.options.onKeyPress(button);\r\n\r\n    if (!this.input[this.options.inputName])\r\n      this.input[this.options.inputName] = \"\";\r\n\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[this.options.inputName],\r\n      this.caretPosition,\r\n      this.caretPositionEnd\r\n    );\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[this.options.inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (\r\n        this.options.maxLength &&\r\n        this.utilities.handleMaxLength(this.input, updatedInput)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      this.input[this.options.inputName] = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[this.options.inputName],\r\n        this.caretPosition,\r\n        this.caretPositionEnd,\r\n        true\r\n      );\r\n\r\n      if (debug) console.log(\"Input changed:\", this.getAllInputs());\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          \"Caret at: \",\r\n          this.getCaretPosition(),\r\n          this.getCaretPositionEnd(),\r\n          `(${this.keyboardDOMClass})`\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === \"function\")\r\n        this.options.onChange(this.getInput(this.options.inputName, true));\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === \"function\")\r\n        this.options.onChangeAll(this.getAllInputs());\r\n    }\r\n\r\n    if (debug) {\r\n      console.log(\"Key pressed:\", button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button, e) {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n    if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n    /**\r\n     * Add active class\r\n     */\r\n    if (e) e.target.classList.add(this.activeButtonClass);\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.isMouseHold = true;\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = setTimeout(() => {\r\n        if (\r\n          (this.isMouseHold &&\r\n            // TODO: This needs to be configurable through options\r\n            ((!button.includes(\"{\") && !button.includes(\"}\")) ||\r\n              button === \"{delete}\" ||\r\n              button === \"{backspace}\" ||\r\n              button === \"{bksp}\" ||\r\n              button === \"{space}\" ||\r\n              button === \"{tab}\")) ||\r\n          button === \"{arrowright}\" ||\r\n          button === \"{arrowleft}\" ||\r\n          button === \"{arrowup}\" ||\r\n          button === \"{arrowdown}\"\r\n        ) {\r\n          if (this.options.debug) console.log(\"Button held:\", button);\r\n\r\n          this.handleButtonHold(button, e);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button = null, e = null) {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseUpDefault) e.preventDefault();\r\n      if (this.options.stopMouseUpPropagation) e.stopPropagation();\r\n    }\r\n\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons(buttonElement => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.isMouseHold = false;\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === \"function\")\r\n      this.options.onKeyReleased(button);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e) {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button) {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = setTimeout(() => {\r\n      if (this.isMouseHold) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs() {\r\n    this.dispatch(instance => {\r\n      instance.replaceInput(this.input);\r\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.setCaretPosition(0);\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName, skipSync = false) {\r\n    inputName = inputName || this.options.inputName;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\r\n\r\n    if (this.options.rtl) {\r\n      // Remove existing control chars\r\n      const inputWithoutRTLControl = this.input[inputName]\r\n        .replace(\"\\u202B\", \"\")\r\n        .replace(\"\\u202C\", \"\");\r\n\r\n      return \"\\u202B\" + inputWithoutRTLControl + \"\\u202C\";\r\n    } else {\r\n      return this.input[inputName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all simple-keyboard inputs\r\n   */\r\n  getAllInputs() {\r\n    const output = {};\r\n    const inputNames = Object.keys(this.input);\r\n\r\n    inputNames.forEach(inputName => {\r\n      output[inputName] = this.getInput(inputName, true);\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input, inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj) {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options = {}) {\r\n    const changedOptions = this.changedOptions(options);\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    if (changedOptions.length) {\r\n      if (this.options.debug) {\r\n        console.log(\"changedOptions\", changedOptions);\r\n      }\r\n\r\n      /**\r\n       * Some option changes require adjustments before re-render\r\n       */\r\n      this.onSetOptions(options);\r\n\r\n      /**\r\n       * Rendering\r\n       */\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detecting changes to non-function options\r\n   * This allows us to ascertain whether a button re-render is needed\r\n   */\r\n  changedOptions(newOptions) {\r\n    return Object.keys(newOptions).filter(\r\n      optionName =>\r\n        JSON.stringify(newOptions[optionName]) !==\r\n        JSON.stringify(this.options[optionName])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(options) {\r\n    if (options.inputName) {\r\n      /**\r\n       * inputName changed. This requires a caretPosition reset\r\n       */\r\n      if (this.options.debug) {\r\n        console.log(\"inputName changed. caretPosition reset.\");\r\n      }\r\n      this.setCaretPosition(null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  clear() {\r\n    this.keyboardDOM.innerHTML = \"\";\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  dispatch(callback) {\r\n    if (!window[\"SimpleKeyboardInstances\"]) {\r\n      console.warn(\r\n        `SimpleKeyboardInstances is not defined. Dispatch cannot be called.`\r\n      );\r\n      throw new Error(\"INSTANCES_VAR_ERROR\");\r\n    }\r\n\r\n    return Object.keys(window[\"SimpleKeyboardInstances\"]).forEach(key => {\r\n      callback(window[\"SimpleKeyboardInstances\"][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons, className) {\r\n    if (!className || !buttons) return false;\r\n\r\n    buttons.split(\" \").forEach(button => {\r\n      className.split(\" \").forEach(classNameItem => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map(buttonTheme => {\r\n          if (buttonTheme.class.split(\" \").includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(\" \");\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons, className) {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (\r\n      buttons &&\r\n      Array.isArray(this.options.buttonTheme) &&\r\n      this.options.buttonTheme.length\r\n    ) {\r\n      const buttonArray = buttons.split(\" \");\r\n      buttonArray.forEach(button => {\r\n        this.options.buttonTheme.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if (\r\n            (className && className.includes(buttonTheme.class)) ||\r\n            !className\r\n          ) {\r\n            const filteredButtonArray = buttonTheme.buttons\r\n              .split(\" \")\r\n              .filter(item => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (filteredButtonArray.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\r\n            } else {\r\n              this.options.buttonTheme.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button) {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal) {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `inputPattern (\"${inputPattern}\"): ${\r\n            didInputMatch ? \"passed\" : \"did not pass!\"\r\n          }`\r\n        );\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners() {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      /**\r\n       * Event Listeners\r\n       */\r\n      document.addEventListener(\"keyup\", this.handleKeyUp);\r\n      document.addEventListener(\"keydown\", this.handleKeyDown);\r\n      document.addEventListener(\"mouseup\", this.handleMouseUp);\r\n      document.addEventListener(\"touchend\", this.handleTouchEnd);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event) {\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event) {\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event) {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  /* istanbul ignore next */\r\n  handleTouchEnd(event) {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event) {\r\n    let targetTagName;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch(instance => {\r\n      const isKeyboard =\r\n        event.target === instance.keyboardDOM ||\r\n        (event.target && instance.keyboardDOM.contains(event.target));\r\n\r\n      if (instance.isMouseHold) {\r\n        instance.isMouseHold = false;\r\n      }\r\n\r\n      if (\r\n        (targetTagName === \"textarea\" || targetTagName === \"input\") &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        instance.setCaretPosition(\r\n          event.target.selectionStart,\r\n          event.target.selectionEnd\r\n        );\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            \"Caret at: \",\r\n            instance.getCaretPosition(),\r\n            instance.getCaretPositionEnd(),\r\n            event && event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`\r\n          );\r\n        }\r\n      } else if (instance.options.disableCaretPositioning || !isKeyboard) {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.setCaretPosition(null);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn) {\r\n    if (!fn) return false;\r\n\r\n    Object.keys(this.buttonElements).forEach(buttonName =>\r\n      this.buttonElements[buttonName].forEach(fn)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy() {\r\n    if (this.options.debug)\r\n      console.log(\r\n        `Destroying simple-keyboard instance: ${this.currentInstanceName}`\r\n      );\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener(\"keyup\", this.handleKeyUp);\r\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\r\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n    document.removeEventListener(\"touchend\", this.handleTouchEnd);\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    let deleteButton = buttonElement => {\r\n      buttonElement.onpointerdown = null;\r\n      buttonElement.onpointerup = null;\r\n      buttonElement.onpointercancel = null;\r\n      buttonElement.ontouchstart = null;\r\n      buttonElement.ontouchend = null;\r\n      buttonElement.ontouchcancel = null;\r\n      buttonElement.onclick = null;\r\n      buttonElement.onmousedown = null;\r\n      buttonElement.onmouseup = null;\r\n\r\n      buttonElement.remove();\r\n      buttonElement = null;\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    this.recurseButtons = null;\r\n    deleteButton = null;\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard wrapper\r\n     */\r\n    this.clear();\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    window[\"SimpleKeyboardInstances\"][this.currentInstanceName] = null;\r\n    delete window[\"SimpleKeyboardInstances\"][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button) {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach(themeObj => {\r\n        if (\r\n          themeObj.class &&\r\n          typeof themeObj.class === \"string\" &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === \"string\"\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(\" \");\r\n          const themeObjButtons = themeObj.buttons.split(\" \");\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(\r\n            `Incorrect \"buttonTheme\". Please check the documentation.`,\r\n            themeObj\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button, callback) {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach(attrObj => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === \"string\" &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === \"string\" &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === \"string\"\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(\" \");\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(\r\n            `Incorrect \"buttonAttributes\". Please check the documentation.`,\r\n            attrObj\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = event => {\r\n      if (event.target.classList.contains(\"hg-button\")) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === \"function\") this.options.onInit();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === \"function\")\r\n      this.options.beforeFirstRender();\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log(\"Using PointerEvents as it is supported by this browser\");\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log(\r\n          \"useTouchEvents has been enabled. Only touch events will be used.\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === \"function\")\r\n      this.options.beforeRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === \"function\") this.options.onRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === \"function\")\r\n      this.options.onModulesLoaded(this);\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name, initCallback) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach(KeyboardModule => {\r\n        const keyboardModule = new KeyboardModule();\r\n\r\n        /* istanbul ignore next */\r\n        if (\r\n          keyboardModule.constructor.name &&\r\n          keyboardModule.constructor.name !== \"Function\"\r\n        ) {\r\n          const classStr = `module-${this.utilities.camelCase(\r\n            keyboardModule.constructor.name\r\n          )}`;\r\n          this.keyboardPluginClasses =\r\n            this.keyboardPluginClasses + ` ${classStr}`;\r\n        }\r\n\r\n        keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses =\r\n        this.keyboardPluginClasses + \" modules-loaded\";\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name, prop) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM,\r\n    rowIndex,\r\n    containerStartIndexes,\r\n    containerEndIndexes\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement(\"div\");\r\n        containerDOM.className += \"hg-button-container\";\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(\r\n          updated_startIndex,\r\n          updated_endIndex - updated_startIndex + 1\r\n        );\r\n        removedElements = updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach(element => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = \"\";\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach(element => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log(\r\n            \"rowDOMContainer\",\r\n            containedElements,\r\n            updated_startIndex,\r\n            updated_endIndex,\r\n            removedElements + 1\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter(\r\n      DOMClass => !!DOMClass\r\n    );\r\n\r\n    return keyboardClasses.join(\" \");\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.clear();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName].forEach((row, rIndex) => {\r\n      const rowArray = row.split(\" \");\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement(\"div\");\r\n      rowDOM.className += \"hg-row\";\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes = [];\r\n      const containerEndIndexes = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers &&\r\n          typeof button === \"string\" &&\r\n          button.length > 1 &&\r\n          button.indexOf(\"[\") === 0;\r\n\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          typeof button === \"string\" &&\r\n          button.length > 1 &&\r\n          button.indexOf(\"]\") === button.length - 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, \"\");\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, \"\");\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? \"button\" : \"div\";\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute, value) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = \"hg-activeButton\";\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (\r\n          this.utilities.pointerEventsSupported() &&\r\n          !useTouchEvents &&\r\n          !useMouseEvents\r\n        ) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = this.utilities.throttle(\r\n            e => {\r\n              this.handleButtonClicked(button);\r\n              this.handleButtonMouseDown(button, e);\r\n            },\r\n            this.options.throttleInput ? this.options.throttleInput : 0\r\n          );\r\n          buttonDOM.onpointerup = e => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n          buttonDOM.onpointercancel = e => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = this.utilities.throttle(\r\n              e => {\r\n                this.handleButtonClicked(button);\r\n                this.handleButtonMouseDown(button, e);\r\n              },\r\n              this.options.throttleInput ? this.options.throttleInput : 0\r\n            );\r\n            buttonDOM.ontouchend = e => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n            buttonDOM.ontouchcancel = e => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = this.utilities.throttle(\r\n              () => {\r\n                this.isMouseHold = false;\r\n                this.handleButtonClicked(button);\r\n              },\r\n              this.options.throttleInput ? this.options.throttleInput : 0\r\n            );\r\n            buttonDOM.onmousedown = e => {\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = e => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute(\"data-skBtn\", button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement(\"span\");\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(\r\n        rowDOM,\r\n        rIndex,\r\n        containerStartIndexes,\r\n        containerEndIndexes\r\n      );\r\n\r\n      /**\r\n       * Appending row to keyboard\r\n       */\r\n      this.keyboardDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (\r\n        this.utilities.pointerEventsSupported() &&\r\n        !useTouchEvents &&\r\n        !useMouseEvents\r\n      ) {\r\n        document.onpointerup = () => this.handleButtonMouseUp();\r\n        this.keyboardDOM.onpointerdown = e =>\r\n          this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = () => this.handleButtonMouseUp();\r\n        document.ontouchcancel = () => this.handleButtonMouseUp();\r\n\r\n        this.keyboardDOM.ontouchstart = e =>\r\n          this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = () => this.handleButtonMouseUp();\r\n        this.keyboardDOM.onmousedown = e =>\r\n          this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","export const getDefaultLayout = () => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\"\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\"\r\n    ]\r\n  };\r\n};\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport default SimpleKeyboard;\r\n"],"sourceRoot":""}